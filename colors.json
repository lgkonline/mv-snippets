{
	"article": [
		{
			"title": "JavaScript: Get content of an iframe",
			"tag": [
				"JavaScript",
				"HTML"
			],
			"content": "Sometimes you need to get the content of an HTML iframe.\nHere is how you can do it.\n\nBut you can only access the content when it's on the the same domain!\n\n```js\nvar iframe = document.querySelector(\"iframe\");\n\n// Make sure the iframe is ready\niframe.onload = function() {\n  var iframeContent = iframe.contentDocument || iframe.contentWindow.document;\n  \n  // Now you can make normal queries\n  console.log(iframeContent.querySelector(\"#element-in-iframe\").innerText);\n};\n```",
			"slug": "js-get-content-of-an-iframe"
		},
		{
			"title": "If / else statement inside of React Component's Render method",
			"tag": [
				"HTML",
				"JavaScript",
				"HTML"
			],
			"content": "Sometimes (well, actually pretty often) you have to use conditional statements inside of React Component's Render methods.\n\nYou could do it like this:\n\n```\nimport React from \"react\";\n\nclass MyComponent extends React.Component {\n    render() {\n        return (\n            <div>\n                {\"LGK\" == \"awesome\" ?\n                    <h1>LGK is awesome!</h1>\n                : \n                    <h1>LGK is not awesome :C</h1>\n                }\n            </div>\n        );\n    }\n}\n```\n\nThis works without any problem. But you always have to set the else part. But in many situations you only need the \"if part\".\nIn this case, this way is much nicer:\n\n```\nimport React from \"react\";\n\nclass MyComponent extends React.Component {\n    render() {\n        return (\n            <div>\n                {\"LGK\" == \"awesome\" &&\n                    <h1>LGK is awesome!</h1>\n                }\n            </div>\n        );\n    }\n}\n```",
			"slug": "react-if-else"
		},
		{
			"title": "JS: Hide an element when clicking on somewhere else",
			"tag": [
				"JavaScript",
				"DOM"
			],
			"slug": "js-hide-an-element-when-clicking-on-somewhere-else",
			"content": "Hint: I used the functions `removeClass()` and `addClass()` to make things easier. You can find them on [this post of me](https://lgkonline.github.io/mv-snippets/#javascript-hasclass-addclass-removeclass-helper-functions)\n\n```\n// By default always hide the popup when the user is clicking on somewhere\ndocument.body.onclick = function() {\n  removeClass(document.querySelector(\"#popup\"), \"in\");\n};    \n\n// Show the popup\ndocument.querySelector(\"#popup-trigger\").addEventListener(\"click\", function() {\n  addClass(document.querySelector(\"#popup\"), \"in\");\n});\n\n// Define which elements shouldn't behave like default\nvar els = document.querySelectorAll(\"#popup-trigger, #popup\");\n\n// When clicking on these elements don't hide the popup\nfor (var i = 0; i < els.length; i++) {\n  els[i].addEventListener(\"click\", function(e) {\n    e.stopPropagation();\n  });\n}\n```\n\nYou can find a live demo on CodePen: [http://codepen.io/lgkonline/pen/rjorrw](http://codepen.io/lgkonline/pen/rjorrw)"
		},
		{
			"title": "JavaScript \"hasClass()\", \"addClass()\", \"removeClass()\" helper functions",
			"slug": "javascript-hasclass-addclass-removeclass-helper-functions",
			"tag": [
				"JavaScript",
				"Helper",
				"DOM"
			],
			"content": "If you're like me and come from jQuery to pure JavaScript, these helper functions might be very helpful for you:\n\n```\nfunction hasClass(el, className) {\n    if (el.classList)\n        return el.classList.contains(className);\n    else\n        return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\n}\n\nfunction addClass(el, className) {\n    if (el.classList)\n        el.classList.add(className);\n    else if (!hasClass(el, className)) \n        el.className += \" \" + className;\n}\n\nfunction removeClass(el, className) {\n    if (el.classList)\n        el.classList.remove(className);\n    else if (hasClass(el, className))\n        el.className=el.className.replace(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'), ' ');\n}\n```"
		},
		{
			"title": "Pure CSS: DRY Centered element with an absolute position",
			"slug": "pure-css-dry-centered-element-with-an-absolute-position-update",
			"tag": [
				"CSS",
				"CSS3",
				"DRY"
			],
			"content": "Maybe you already know this trick to bring an absolute positioned element into the middle:\n\n```\n#box {\n  position: absolute;\n  width: 400px;\n  height: 225px;\n  \n  left: 50%;\n  margin-left: -200px; /* half of the width */\n  \n  top: 50%;\n  margin-top: -112.5px; /* half of the height */\n}\n```\n\nBut this method is not really DRY (don't repeat yourself). If you want to change the [ic]width[/ic] property, you also have to update the [ic]margin-left[/ic] property and to recalculate it.\n\nSo instead you could take advantage of CSS variables. Like this:\n\n```\n:root {\n  /* Set the width and height only once */\n  --box-width: 400px;\n  --box-height: 225px;\n}\n\n#box {\n  position: absolute;\n  width: var(--box-width);\n  height: var(--box-height);\n  \n  /* Take 50% and substract the half of the box from it */\n  left: calc(50% - var(--box-width)/2);\n  top: calc(50% - var(--box-height)/2);\n}\n```\n\nSee the live demo on CodePen: [http://codepen.io/lgkonline/pen/YNzqXz](http://codepen.io/lgkonline/pen/YNzqXz)\n\n*I've updated this solution. You can see the original one here: [http://codepen.io/lgkonline/pen/aBKeZM](http://codepen.io/lgkonline/pen/aBKeZM)*"
		},
		{
			"title": "CSS: Use the device's default font",
			"slug": "css-use-the-devices-default-font",
			"tag": [
				"CSS",
				"Responsive Design",
				"Font"
			],
			"content": "With this snippet your page will always use the default font of the user's device:\n\n```\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n}\n```"
		},
		{
			"title": "Vue.js: Sorting array on a custom filter - Avoid an infinite loop",
			"slug": "vue-js-sorting-array-on-a-custom-filter-avoid-an-infinite-loop",
			"tag": [
				"HTML",
				"JavaScript",
				"Vue.js"
			],
			"content": "With Vue.js you can create custom filters as a method like this:\n\n**index.html**\n```\n<main id=\"app\">\n  <div v-for=\"i in even(items)\" class=\"item\">\n    {{i.title}}\n    <small>{{i.position}}</small>\n  </div>\n</main>\n```\n\n**main.js**\n```\nvar app = new Vue({\n  el: \"#app\",\n  data: {\n    items: [\n      {\n        \"title\": \"Jerry\",\n        \"position\": 5\n      },\n      {\n        \"title\": \"Bucks Bunny\",\n        \"position\": 1\n      }\n    ]\n  },\n  methods: {\n    even: function(arr) {\n      return arr.sort(function(a, b) {\n        return a.position - b.position;\n      });\n    }\n  }\n});\n```\n\n**STOP, DON'T USE THAT CODE!**\n`arr.sort(...)` will generate an infinite loop. To avoid that, you should use `slice()` before the `sort()` function. Like this:\n\n**main.js**\n```\nvar app = new Vue({\n  el: \"#app\",\n  data: {\n    items: [\n      {\n        \"title\": \"Jerry\",\n        \"position\": 5\n      },\n      {\n        \"title\": \"Bucks Bunny\",\n        \"position\": 1\n      }\n    ]\n  },\n  methods: {\n    even: function(arr) {\n      // Set slice() to avoid to generate an infinite loop!\n      return arr.slice().sort(function(a, b) {\n        return a.position - b.position;\n      });\n    }\n  }\n});\n```\n\nYou can find a live demo on CodePen: [http://codepen.io/lgkonline/pen/dOebrw](http://codepen.io/lgkonline/pen/dOebrw)"
		},
		{
			"title": "Split your Vue.js script into multiple files",
			"slug": "split-your-vue-js-script-into-multiple-files",
			"tag": [
				"HTML",
				"JavaScript",
				"Vue.js"
			],
			"content": "You are using Vue.js and your site has multiple pages. But your model for contact form information should only be available on the [ic]contact.html[/ic] site.\n\nSo this is how you do it.\n\n**contact.html**\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <!-- stylesheets and stuff... -->\n  </head>\n\n  <body>\n    <div id=\"app\">\n      <h1>{{appTitle}}</h1>\n\n      <h2>Contact</h2>\n      <form v-on:submit=\"sendContactForm()\">\n        <label>Email</label>\n        <input type=\"text\" v-model=\"contactForm.email\">\n\n        <label>Name</label>\n        <input type=\"text\" v-model=\"contactForm.name\">\n\n        <label>Message</label>\n        <textarea v-model=\"contactForm.message\"></textarea>\n\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n\n    <script src=\"vue.js\"></script>\n\n    <script src=\"global.js\"></script>\n\n    <!-- Only needs to be included on contact.html. -->\n    <script src=\"contact.js\"></script>\n\n    <script src=\"main.js\"></script>\n  </body>\n</html>\n```\n\n**global.js**\n```\n<!-- Set data and methods that should be available on each page. -->\nvar globalVue = {\n  data: {\n    appTitle: \"Hello World\"\n  },\n  methods: {}\n};\n```\n\n**contact.js**\n```\n<!-- Extend the global settings by data and methods that should only be available at contact.html. -->\n\nglobalVue.data.contactForm = {\n  email: null,\n  name: null,\n  message: null\n};\n\nglobalVue.methods.sendContactForm = function() {\n  // send it ...\n  // Use app.contactForm to get access to the model data.\n};\n```\n\n**main.js**\n```\n<!-- Finally create the Vue instance and set the data and methods -->\nvar app = new Vue({\n  el: '#app',\n  data: globalVue.data,\n  methods: globalVue.methods\n});\n```"
		},
		{
			"title": "Visual Studio Code: Set file association for one folder",
			"slug": "visual-studio-code-set-file-association-for-one-folder",
			"tag": [
				"HTML",
				"PHP",
				"Visual Studio Code"
			],
			"content": "In my current project I have a \"View\" folder with PHP files in it. But the contents are actually just HTML markup. So I wanted to tell that Visual Studio, so I can get better intellisense results.\n\nI you want to do the same, here is how it works:\n\n1. Go to the Workspace Settings (File » Preferences » Workspace Settings)\n2. Add the following option:\n\n```\n    \"files.associations\": {\n        \"**/View/*.php\": \"html\"\n    }\n```\n\nIf you didn't have set settings before the **settings.json** file should like like this:\n```\n{\n    \"files.associations\": {\n        \"**/View/*.php\": \"html\"\n    }\n}\n```"
		},
		{
			"title": "Simple Class Inheriting in JavaScript",
			"slug": "simple-class-inheriting-in-javascript",
			"tag": [
				"JavaScript",
				"Class",
				"Object"
			],
			"content": "```\n// Classes area\n\nfunction Person() {\n  var me = {};\n  \n  me.Name;\n  me.Birthday;\n  \n  me.Speak = function() {\n    alert(\n      \"Hello! I am \" + me.Name + \" and I am \" +\n      me.Age + \" years old.\"\n    );\n  }\n  \n  // Important!\n  return me;\n}\n\nfunction Developer() {\n  // Inherit Person\n  var me = Person();\n  \n  me.FavoriteCodeLanguage;\n  \n  me.Programming = function() {\n    document.querySelector(\"#output\").value = \"Writing stuff...\";\n  }\n  \n  return me;\n}\n\n\n// Implementation\nvar normalPerson = new Person();\nnormalPerson.Name = \"Josh\";\nnormalPerson.Age = 18;\n\nvar developerPerson = new Developer();\ndeveloperPerson.Name = \"Steve\";\ndeveloperPerson.Age = 21;\n```\n\nHere you can find a live demo: [http://codepen.io/lgkonline/pen/EypgPx](http://codepen.io/lgkonline/pen/EypgPx)"
		},
		{
			"title": "The simpliest way for a sticky footer (HTML, CSS)",
			"slug": "the-simpliest-way-for-a-sticky-footer-html-css",
			"tag": [
				"CSS",
				"HTML"
			],
			"content": "It is so easy by just using `flex`:\n\n```\nbody {\n    display: flex;\n    min-height: 100vh;\n    flex-direction: column;\n}\n\nmain {\n    flex: 1;\n}\n```\n\nAnd here is the HTML:\n```\n<body>\n    <header>\n        <h1>My Website</h1>\n    </header>\n\n    <main>\n        My Content\n    </main>\n\n    <footer>\n        Footer\n    </footer>\n</body>\n```\n\nHere is a live demo: [http://codepen.io/lgkonline/pen/XKYJVK](http://codepen.io/lgkonline/pen/XKYJVK)"
		},
		{
			"title": "Using Font Icons for Xamarin.Forms",
			"slug": "using-font-icons-for-xamarin-forms",
			"tag": [
				"C#",
				"Xamarin",
				".NET",
				"Xamarin.Forms",
				"FontAwesome"
			],
			"content": "I love using Font Icons for web projects. So why not using it for Xamarin.Forms projects too?\nThis method has only been tested on Android and UWP.\n\n**Important:** This tutorial requires that you already have some experience working with Xamarin.Forms.\n\n## Create a Xamarin.Forms Portable solution\nOpen Visual Studio and create a new project solution using the template **Blank App (Xamarin.Forms Portable)**. Wait until the solution has been successfully created.\n\n## Download and add a font\nFor this tutorial I am using the Font Icon library Font Awesome. You can download it here: [http://fontawesome.io/](http://fontawesome.io/)\nAfter unzipping the downloaded package place the **fontawesome-webfont.ttf** file into the Android and UWP projects:\n* **Android:** Into **Assets/Fonts/fontawesome-webfont.ttf**\n* **UWP:** Into **Assets/Fonts/fontawesome-webfont.ttf**\n\n## Creating a custom view\nTo allow easy embedding icons into your pages, I recommend to create custom views. I make a view called **FontAwesomeLabel**. Just add a new class into the Portable project named **FontAwesomeLabel.cs** with this content:\n```\nusing System.Reflection;\nusing Xamarin.Forms;\n\nnamespace Icon\n{\n   public class FontAwesomeLabel : Label\n   {\n      public FontAwesomeLabel()\n      {\n         FontFamily = Device.OnPlatform(null, \"FontAwesome\", \"/Assets/Fonts/fontawesome-webfont.ttf#FontAwesome\");\n      }\n   }\n}\n```\n\n## A renderer for Android\nWhile this should already work for UWP, the Android project requires a custom renderer.\nSo add a new class into the Android project called **FontAwesomeLabelRenderer.cs** with following content:\n```\nusing System;\nusing Xamarin.Forms;\nusing Xamarin.Forms.Platform.Android;\nusing Android.Graphics;\n\n/* 'Icon' is the namespace for my solution. So instead you should include your namespaces, of course. */\nusing Icon;\nusing Icon.Droid;\n\n[assembly: ExportRenderer(typeof(FontAwesomeLabel), typeof(FontAwesomeLabelRenderer))]\nnamespace Icon.Droid\n{\n   class FontAwesomeLabelRenderer: LabelRenderer\n   {\n      protected override void OnElementChanged(ElementChangedEventArgs<Label> e)\n      {\n         base.OnElementChanged(e);\n         var label = Control;\n         Typeface font;\n         try\n         {\n            font = Typeface.CreateFromAsset(Forms.Context.Assets, \"Fonts/fontawesome-webfont.ttf\");\n            label.Typeface = font;\n         }\n         catch (Exception ex)\n         {\n            System.Diagnostics.Debug.WriteLine(\"TTF file not found. Make sure the Android project contains it at '/Assets/Fonts/fontawesome-webfont.ttf'.\");\n         }\n\n      }\n   }\n}\n```\nSo now it should also work on Android.\n\n## Embed your first icon into a page\nThat should be pretty easy. Just open **App.cs** in the Portable project and add the **FontAwesomeLabel** view into the **ContentPage** object:\n```\n...\n      public App()\n      {\n         // The root page of your application\n         MainPage = new ContentPage\n         {\n            Content = new StackLayout\n            {\n               VerticalOptions = LayoutOptions.Center,\n               Children = {\n                  new Label {\n                     HorizontalTextAlignment = TextAlignment.Center,\n                     Text = \"Welcome to Xamarin Forms!\"\n                  },\n                  /* This is what I added: */\n                  new FontAwesomeLabel\n                  {\n                     Text = '\\uf2a3'.ToString()\n                  }\n                  /**/\n               }\n            }\n         };\n      }\n...\n```\nSo as you can see for the `Text` attribute I set a unicode character and converted it to a string. The unicode represents which icon I will use.\n\n## Find out the unicode of an icon\nThis is an easy way to find out the unicode of an specific icon:\n\n1. Go to [http://fontawesome.io/icons/](http://fontawesome.io/icons/) and choose an icon you want to use.\n2. Open the developer tools of your browser (F12). I recommond using Chrome for this.\n3. In the elements view find your icon. It should be a `<i class=\"fa fa-*></i>` element. Toggle the element so you can see the `::before` pseudo element and select it.\n4. On the styles view you now should see the unicode.\n\n![Screenshot](https://lgk.io/files/fa-with-xamarin-forms.png)\n\n## Using FontAwesome icons by name\nBecause searching for the unicode for each icon is a little bit dumb, I created a script which generated a static C# class containing all FontAwesome icons. \nWith this static class in your project calling an icon will look like this:\n```\nnew FontAwesomeLabel\n{\n   Text = FontAwesomeIcon.FaAmbulance.ToString()\n}\n```\n\nYou can always find the latest code at here: [https://lgkonline.github.io/FontAwesome-Convert/](https://lgkonline.github.io/FontAwesome-Convert/)\n**Edit:** I repaired the link ;)"
		},
		{
			"title": "jQuery: Simple template solution without plugins",
			"slug": "jquery-simple-template-solution-without-plugins",
			"tag": [
				"HTML",
				"JavaScript",
				"jQuery",
				"Template"
			],
			"content": "This is a great and simple solution to use HTML templates in your jQuery code.\n\nFirst create a template area in your HTML document:\n```\n<section class=\"tpl-area\">\n</section>\n```\n\nTo make sure that the template area is not visible add this CSS:\n```\n.tpl-area,\n.tpl-area * {\n    display: none !important;\n}\n```\n\nMake a template:\n```\n<section class=\"tpl-area\">\n    <article id=\"tpl-hello\">\n        <h1>Hello, <span class=\"hello-text\"></span>!</h1>\n    </article>\n</section>\n```\n\nPlace a container where the output should appear. Of course outside of [ic].tpl-area[/ic]:\n```\n<div id=\"output\"></div>\n```\n\nUse the template in your code:\n```\nvar names = [\"Luna\", \"Dean\", \"Dobby\"];\n\n// Make sure the output container is empty\n$(\"#output\").empty();\n\nfor (var i = 0; i < names.length; i++) {\n    // Clone the template\n    var element = $(\"#tpl-hello\").clone();\n\n    // And fill it\n    $(element).find(\".hello-text\").text(names[i]);\n\n    // Place this copy\n    $(\"#output\").append($(element).html());\n}\n```\n\nYou can find a live demo here:\n[http://codepen.io/lgkonline/pen/JKXwow](http://codepen.io/lgkonline/pen/JKXwow)"
		},
		{
			"title": "JavaScript \"isSet()\" helper function",
			"slug": "javascript-isset-helper-function",
			"tag": [
				"JavaScript",
				"Helper"
			],
			"content": "I often missed an `isSet()` function in JavaScript, so I always add this helper function:\n\n```\nfunction isSet(variable) {\n   return typeof variable != \"undefined\" && variable != null;\n}\n```\n\nUse:\n```\nvar myVariable = \"Hey ho\";\n\nif (isSet(myVariable)) {\n   echo \"Yes, I am set\";\n}\n```"
		},
		{
			"title": "Make responsive centered containers",
			"slug": "make-responsive-centered-containers",
			"tag": [
				"CSS",
				"Responsive Design",
				"Container",
				"Align"
			],
			"content": "If you 've worked with Bootstrap you might know the very useful `.container` class.\nWell, it's actually pretty easy to make a responsive centered container with just 3 lines of CSS:\n\n```\nsection {\n  padding: 0 calc(50% - 24rem);\n}\n```\n\nHere is a live demo: [http://codepen.io/lgkonline/pen/MeKGpz](http://codepen.io/lgkonline/pen/MeKGpz)"
		}
	],
	"route": "react-if-else"
}