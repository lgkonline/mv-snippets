{
	"article": [
		{
			"title": "JavaScript: Get content of an iframe",
			"tag": [
				"JavaScript",
				"HTML"
			],
			"content": "Sometimes you need to get the content of an HTML iframe.\nHere is how you can do it.\n\nBut you can only access the content when it's on the the same domain!\n\n```js\nvar iframe = document.querySelector(\"iframe\");\n\n// Make sure the iframe is ready\niframe.onload = function() {\n  var iframeContent = iframe.contentDocument || iframe.contentWindow.document;\n  \n  // Now you can make normal queries\n  console.log(iframeContent.querySelector(\"#element-in-iframe\").innerText);\n};\n```",
			"slug": "js-get-content-of-an-iframe"
		},
		{
			"title": "If / else statement inside of React Component's Render method",
			"tag": [
				"HTML",
				"JavaScript",
				"HTML"
			],
			"content": "Sometimes (well, actually pretty often) you have to use conditional statements inside of React Component's Render methods.\n\nYou could do it like this:\n\n```\nimport React from \"react\";\n\nclass MyComponent extends React.Component {\n    render() {\n        return (\n            <div>\n                {\"LGK\" == \"awesome\" ?\n                    <h1>LGK is awesome!</h1>\n                : \n                    <h1>LGK is not awesome :C</h1>\n                }\n            </div>\n        );\n    }\n}\n```\n\nThis works without any problem. But you always have to set the else part. But in many situations you only need the \"if part\".\nIn this case, this way is much nicer:\n\n```\nimport React from \"react\";\n\nclass MyComponent extends React.Component {\n    render() {\n        return (\n            <div>\n                {\"LGK\" == \"awesome\" &&\n                    <h1>LGK is awesome!</h1>\n                }\n            </div>\n        );\n    }\n}\n```",
			"slug": "react-if-else"
		},
		{
			"title": "JS: Hide an element when clicking on somewhere else",
			"tag": [
				"JavaScript",
				"DOM"
			],
			"slug": "js-hide-an-element-when-clicking-on-somewhere-else",
			"content": "Hint: I used the functions `removeClass()` and `addClass()` to make things easier. You can find them on [this post of me](https://lgkonline.github.io/mv-snippets/#javascript-hasclass-addclass-removeclass-helper-functions)\n\n```\n// By default always hide the popup when the user is clicking on somewhere\ndocument.body.onclick = function() {\n  removeClass(document.querySelector(\"#popup\"), \"in\");\n};    \n\n// Show the popup\ndocument.querySelector(\"#popup-trigger\").addEventListener(\"click\", function() {\n  addClass(document.querySelector(\"#popup\"), \"in\");\n});\n\n// Define which elements shouldn't behave like default\nvar els = document.querySelectorAll(\"#popup-trigger, #popup\");\n\n// When clicking on these elements don't hide the popup\nfor (var i = 0; i < els.length; i++) {\n  els[i].addEventListener(\"click\", function(e) {\n    e.stopPropagation();\n  });\n}\n```\n\nYou can find a live demo on CodePen: [http://codepen.io/lgkonline/pen/rjorrw](http://codepen.io/lgkonline/pen/rjorrw)"
		},
		{
			"title": "JavaScript \"hasClass()\", \"addClass()\", \"removeClass()\" helper functions",
			"slug": "javascript-hasclass-addclass-removeclass-helper-functions",
			"tag": [
				"JavaScript",
				"Helper",
				"DOM"
			],
			"content": "If you're like me and come from jQuery to pure JavaScript, these helper functions might be very helpful for you:\n\n```\nfunction hasClass(el, className) {\n    if (el.classList)\n        return el.classList.contains(className);\n    else\n        return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\n}\n\nfunction addClass(el, className) {\n    if (el.classList)\n        el.classList.add(className);\n    else if (!hasClass(el, className)) \n        el.className += \" \" + className;\n}\n\nfunction removeClass(el, className) {\n    if (el.classList)\n        el.classList.remove(className);\n    else if (hasClass(el, className))\n        el.className=el.className.replace(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'), ' ');\n}\n```"
		},
		{
			"title": "Pure CSS: DRY Centered element with an absolute position",
			"slug": "pure-css-dry-centered-element-with-an-absolute-position-update",
			"tag": [
				"CSS",
				"CSS3",
				"DRY"
			],
			"content": "Maybe you already know this trick to bring an absolute positioned element into the middle:\n\n```\n#box {\n  position: absolute;\n  width: 400px;\n  height: 225px;\n  \n  left: 50%;\n  margin-left: -200px; /* half of the width */\n  \n  top: 50%;\n  margin-top: -112.5px; /* half of the height */\n}\n```\n\nBut this method is not really DRY (don't repeat yourself). If you want to change the [ic]width[/ic] property, you also have to update the [ic]margin-left[/ic] property and to recalculate it.\n\nSo instead you could take advantage of CSS variables. Like this:\n\n```\n:root {\n  /* Set the width and height only once */\n  --box-width: 400px;\n  --box-height: 225px;\n}\n\n#box {\n  position: absolute;\n  width: var(--box-width);\n  height: var(--box-height);\n  \n  /* Take 50% and substract the half of the box from it */\n  left: calc(50% - var(--box-width)/2);\n  top: calc(50% - var(--box-height)/2);\n}\n```\n\nSee the live demo on CodePen: [http://codepen.io/lgkonline/pen/YNzqXz](http://codepen.io/lgkonline/pen/YNzqXz)\n\n*I've updated this solution. You can see the original one here: [http://codepen.io/lgkonline/pen/aBKeZM](http://codepen.io/lgkonline/pen/aBKeZM)*"
		}
	]
}